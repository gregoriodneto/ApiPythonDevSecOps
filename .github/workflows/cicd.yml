name: CI/CD Pipeline - Python App

on:
  push:
    branches: [main]

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout do código
        uses: actions/checkout@v4

      - name: 🗂️ Criar pasta zap-report
        run: mkdir -p zap-report

      - name: 🐳 Build e rodar app + zap via docker-compose
        run: |
          docker build -t apipythondevsecops-app .
          docker run -d --name python-app -p 8000:8000 apipythondevsecops-app

      - name: 🕓 Esperar app subir
        run: |
          for i in {1..20}; do
            if curl -s http://localhost:8000 > /dev/null; then
              echo "✅ App está no ar!"
              break
            fi
            echo "⏳ Esperando app subir... Tentativa $i"
            sleep 3
          done

      - name: 🛡️ Rodar ZAP scan
        run: |
          docker run --rm --network host -v "$(pwd)/zap-report:/zap/wrk" zaproxy/zap-stable \
            zap-baseline.py -t http://localhost:8000 -J report_json.json -w report_md.md -r report_html.html || true

      - name: 📤 Salvar relatório ZAP
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report/*

  docker-deploy:
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
      - name: 📦 Checkout do código
        uses: actions/checkout@v4

      - name: 🔐 Login no Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 🐳 Build e push da imagem Docker
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/python-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/python-app:latest

      - name: 🔐 Adicionar chave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: 🚀 Deploy no servidor remoto
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            docker pull ${{ secrets.DOCKER_USERNAME }}/python-app:latest
            docker stop python-app || true
            docker rm python-app || true
            docker run -d --name python-app -p 80:8000 ${{ secrets.DOCKER_USERNAME }}/python-app:latest
          EOF